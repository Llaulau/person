class Personne {
    var nom: String
    var prenom: String
    
    init (nom: String, prenom: String) {
        self.nom = nom
        self.prenom = prenom
    }
    
}

class Employe: Personne {
    var code: UInt
    var departement: String
    
    override init (nom: String, prenom: String) {
        self.code = 0
        self.departement = ""
        super.init(nom: nom, prenom: prenom)
    }
    
    init(nom: String, prenom: String, code: UInt, departement: String) {
        self.code = code
        self.departement = departement
        super.init(nom: nom, prenom: prenom)
    }
    
}

var monEmpl = Employe(nom: "Dupont", prenom: "Michel")
var monEmpl2 = Employe(nom: "Rougemont", prenom: "Pierre")

print ("\(monEmpl.nom) \(monEmpl.prenom) \(monEmpl.code) \(monEmpl.departement)")
print ("\(monEmpl2.nom) \(monEmpl2.prenom) \(monEmpl2.code) \(monEmpl2.departement)")

enum NiveauScolaire {
    case un, deux, trois, quatre, cinq, six, sept, huit, neuf, dix, onze
}

class Eleve: Personne {
    var ecole: String
    var filiere: String?
    var niveau: NiveauScolaire = NiveauScolaire.un
    
    init(nom: String, prenom: String, ecole: String) {
        self.ecole = ecole
        super.init(nom: nom, prenom: prenom)
    }
    
    init(nom: String, prenom: String, ecole: String, filiere: String, niveau: NiveauScolaire = NiveauScolaire.un) {
        self.ecole = ecole
        self.filiere = filiere
        super.init(nom: nom, prenom: prenom)
    }
}


var eleve1 = Eleve(nom: "Paulson", prenom: "Gilles-Simon", ecole: "My Best School")
var eleve2 = Eleve(nom: "Jean-Jacques", prenom: "Rousseau", ecole: "Lettre", filiere: "Lettres", niveau: .dix)
var eleve3 = Eleve(nom: "Calvin", prenom: "Jean", ecole: "College Rousseau", filiere: "Science")

print(eleve1.ecole)
print(eleve2.ecole)
print(eleve3.ecole)

// Protocol
protocol Sportif {
    func getSportPrincipal() -> String
    func getAutresSports() -> [String]?
}

class EleveSportif: Eleve, Sportif {
    var sport: String
    var autresSports: [String]?
    
    func getSportPrincipal() -> String {
        return sport
    }
    
    func getAutresSports() -> [String]? {
        return autresSports
    }
    
    init (nom: String, prenom: String, code: UInt, departement: String, sport: String) {
        self.sport = sport
        super.init(ecole: ecole, filiere: filiere, niveau: niveau, ecole: ecole)
    }
    
    func addSport(sport: String) {
        
        
        if autresSports == nil {
            autresSports = [String]()
        }
    }

class EmployeSportif: Employe, Sportif {
    var sport: String
    var autresSports: [String]?
    
    func getSportPrincipal() -> String {
        return sport
    }
    
    func getAutresSports() -> [String]? {
        return autresSports
    }
    
    init (nom: String, prenom: String, code: UInt, departement: String, sport: String) {
        self.sport = sport
        super.init(nom: nom, prenom: prenom, code: code, departement: departement)
    }
    
    func addSport(sport: String) {
        
        
        if autresSports == nil {
            autresSports = [String]()
        }
        
        autresSports?.append(sport)
        /*
         if let _ = autresSports {
         autresSports?.append(contentsOf: sport)
         }
         else {
         autresSports = [String]()
         autresSports?.append(sport)
         }
         */
    }
}

var employeeSportif1 = EmployeSportif(nom: "Belmondo", prenom: "Jean-Paul", code: 1245, departement: "Compta", sport: "Basket")

var sportifs = [Sportif]()
    sportifs.append(employeSportif1)
    sportifs.append(employeSportif2)
    sportifs.append(employeSportif3)
    sportifs.append(employeeSportif2)
// employeeSportif1.addSport(sport: ["Natation","Ski","Randonnee"])
employeeSportif1.addSport(sport: "Natation")

print ("=================")
print (employeeSportif1.getSportPrincipal())

/* for sport in employeeSportif1.getAutresSports()! {
    print (sport)
}

    var sportifs in sportifs {

    for sportif in sportifs {
    print (sportif.getSportPrincipa)
} */
    
    //Case figure type casting - https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html
    
for sportif in sportifs {
    
    if sportif in sportifs {
    
    if sportif is EleveSportif {
        let unEleveSportif = sportif as! EleveSportif //cast
        // unEleveSportif.
        sportif.
    }
    
    print (sportif.getSportPrincipal(), terminator:" ")
    if let _ = sportif.getAutresSports() {
        for autreSport in sportif.getAutresSports()! {
            print (autreSport, terminator:" ")
    }
        }
  /*
    func sportif() -> [String] () {
    
    let sportif: Set = ["employeSportif1", "employeSportif2", "employeSportif3"]
    let sortedSportif = sportif.sorted()
    print(sorted)
    } */
    
    var sportfs = [Sportif]()
    print("employeSportif1 [Sportif]", "employeSportif2", "employeSportif3")

  }
}
